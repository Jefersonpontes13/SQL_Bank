-- MySQL Script generated by MySQL Workbench
-- Sat 23 Nov 2019 12:55:20 PM -03
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema null_bank
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema null_bank
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `null_bank` DEFAULT CHARACTER SET utf8 ;
USE `null_bank` ;
USE `null_bank`;

DELIMITER $$
USE `null_bank`$$
CREATE DEFINER = CURRENT_USER TRIGGER `null_bank`.`funcionario_BEFORE_INSERT`
BEFORE INSERT ON `funcionario`
FOR EACH ROW
BEGIN
	IF NEW.salario IS NOT NULL AND NEW.salario < 1500.00
    THEN
		SET NEW.salario=1500.00;
	END IF;

END$$

USE `null_bank`$$
CREATE DEFINER = CURRENT_USER TRIGGER `null_bank`.`funcionario_AFTER_INSERT`
AFTER INSERT ON `funcionario`
FOR EACH ROW
BEGIN
	UPDATE agencia
    SET montante_salarial= OLD.montante_salarial + NEW.salario
    WHERE id_agencia=NEW.agencia_id_agencia;
END$$

USE `null_bank`$$
CREATE DEFINER = CURRENT_USER TRIGGER `null_bank`.`funcionario_AFTER_UPDATE`
AFTER UPDATE ON `funcionario`
FOR EACH ROW
BEGIN
	IF NEW.salario IS NOT NULL AND NEW.salario < 1500.00
    THEN
		SET NEW.salario=OLD.salario;
	END IF;
    
UPDATE agencia 
SET 
    montante_salarial = OLD.montante_salarial - OLD.salario,
    montante_salarial = NEW.montante_salarial + NEW.salario
WHERE
    id_agencia = NEW.agencia_id_agencia;
    
END$$

USE `null_bank`$$
CREATE DEFINER = CURRENT_USER TRIGGER `null_bank`.`funcionario_AFTER_DELETE` AFTER DELETE ON `funcionario` FOR EACH ROW
BEGIN
	UPDATE agencia
    SET montante_salarial= OLD.montante_salarial - NEW.salario
    WHERE id_agencia=NEW.agencia_id_agencia;
END$$

USE `null_bank`$$
CREATE DEFINER = CURRENT_USER TRIGGER `null_bank`.`dependente_AFTER_INSERT` AFTER INSERT ON `dependente` FOR EACH ROW
BEGIN
	DECLARE upcount INT;
    SET upcount = (SELECT count(funcionario_matricula) where funcionario_matricula = new.funcionario_matricula );
    IF upcount>=5
    THEN SET MESSAGE_TEXT = 'Limite';
    ROLLBACK;
	END if;
END$$

USE `null_bank`$$
CREATE DEFINER = CURRENT_USER TRIGGER `null_bank`.`trasnsacao_AFTER_INSERT` AFTER INSERT ON `trasnsacao` FOR EACH ROW
BEGIN
	UPDATE conta
	SET saldo = saldo + NEW.valor
    where NEW.conta_id_conta = id_conta AND conta_agencia_id_agencia = agencia_id_agencia;
END$$

USE `null_bank`$$
CREATE DEFINER = CURRENT_USER TRIGGER `null_bank`.`cliente_tem_conta_AFTER_INSERT` AFTER INSERT ON `cliente_tem_conta` FOR EACH ROW
BEGIN
	DECLARE insertcount INT;
    SET insertcount = (SELECT count(cliente_cpf) where conta_id_conta = new.conta_id_conta );
    IF insertcount>2
    THEN SET MESSAGE_TEXT = 'Limite';
    ROLLBACK;
    END IF;
END$$

USE `null_bank`$$
CREATE DEFINER = CURRENT_USER TRIGGER `null_bank`.`cliente_tem_conta_AFTER_UPDATE` AFTER UPDATE ON `cliente_tem_conta` FOR EACH ROW
BEGIN
	DECLARE upcount INT;
    SET upcount = (SELECT count(cliente_cpf) where conta_id_conta = new.conta_id_conta );
    IF upcount>2
    THEN SET MESSAGE_TEXT = 'Limite';
    ROLLBACK;
    END IF;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
